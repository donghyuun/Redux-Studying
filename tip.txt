ctrl + d : 한번 누르면 블럭이 지정되고 두번째부터는 그 뒤에 있는 
같은 단어가 누른횟수만큼 블럭이 지정된다

ctrl + shift + L : 같은 단어 모두지정

---------------------------------------------

Redux.createStore를 통해 store를 만들고, 
이때 state를 생성하는 reducer함수를 인자로 줌으로서 결과적으로 state를 가지고 있는 store가 생성된다. 
그리고 getState를 통해 store의 state를 가져올 수 있다.

----------------------------------------
Redux가 없는 코드는 각각의 component(부품) 간의 의존성이 너무 높습니다.
예를 들어, 다른 component의 코드를 수정하거나 삭제하면(Red 삭제), 다른 component와(Blue, Green) 연결된 코드가 얽혀있어 오류가 발생합니다.
그러므로 component 추가, 수정, 삭제 시, 기존의 component를 모두 수정해야 합니다.
하지만, Redux를 통해 중앙 집중형 관리를 하면, 각각의 component는 action(상태가 바뀌었다는 것)을 store에 dispatch(통보)하면 됩니다.
이에 따른 자신의 변화를 작성 후 store에 subscribe(구독)하면, state가 바뀔 때마다 통보를 받기 때문에 다른 component와의 연결 없이 자신의 모양을 자유롭게 바꿀 수 있습니다.
즉, 수정해도 다른 부품들은 영향을 받지 않게되죠.
요약하자면, Redux를 통해 각 Module의 독립성을 보장받을 수 있습니다.
---------------------------------------------
redux는 단 하나의 store을 유지한다, 그리고 store은 reducer를 통해 가공된다
따라서 application의 상태가 궁금하면 reducer를 이용하면 된다.
----------------------------------------------
store에 직접 접근할 수 없고(직접 수정하지 못하도록), getState를 이용해야만 접근할 수 있음